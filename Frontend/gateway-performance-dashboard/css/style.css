body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
    display: flex; /* Aktiviert Flexbox */
    flex-direction: column; /* Ordnet Kinder untereinander an */
    align-items: center; /* Zentriert Kinder horizontal */
}

.container {
    width: 70%; /* Begrenzt die maximale Breite des Hauptcontainers */
    max-width: 1000px; /* Etwas breiter für größere Bildschirme */
    background-color: #fff; /* Hintergrund für den Container */
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    color: #333;
}

.controls {
    text-align: center; /* Zentriert die Buttons innerhalb des Divs */
    margin-bottom: 20px;
}

button {
    display: inline-block;
    margin: 10px;
    padding: 12px 24px; /* Etwas größere Buttons */
    font-size: 16px;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.status-messages {
    text-align: center;
    margin-bottom: 20px;
}

/* ID in HTML ist statusText, nicht statusMessage */
#statusText {
    margin-top: 10px; /* Reduzierter oberer Rand */
    font-size: 16px; /* Etwas größere Schrift */
    color: #555;
    min-height: 20px; /* Stellt sicher, dass der Bereich nicht zusammenfällt */
}

.chart-container {
    margin: 20px auto;
    /* max-width wurde entfernt, wird durch .container gesteuert */
    /* Die Höhe wird hier explizit gesetzt, um das Diagramm größer zu machen */
    width: 100%; /* Nimmt die volle Breite des .container ein */
    height: 500px; /* Deutlich höhere Canvas für bessere Sichtbarkeit */
    position: relative; /* Notwendig für Chart.js responsive Verhalten in einem Flex-Container */
}

canvas#performanceChart {
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 4px;
    /* width und height Attribute sollten nicht direkt auf Canvas gesetzt werden,
       wenn Chart.js responsive ist und der Container die Größe steuert.
       Chart.js passt die Canvas-Größe an den Container an. */
}

.raw-json {
    margin-top: 30px;
    text-align: left; /* Linksbündig für bessere Lesbarkeit von JSON */
}

.raw-json h2 {
    text-align: center; /* Überschrift zentriert */
    margin-bottom: 10px;
}

pre#rawJsonOutput {
    background-color: #e9e9e9;
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 4px;
    white-space: pre-wrap; /* Sorgt für Zeilenumbrüche bei Bedarf */
    word-wrap: break-word; /* Stellt sicher, dass lange Strings umgebrochen werden */
    max-height: 300px; /* Maximale Höhe für den JSON-Output, falls er sehr lang wird */
    overflow-y: auto; /* Scrollbar, falls der Inhalt die max-height überschreitet */
}
